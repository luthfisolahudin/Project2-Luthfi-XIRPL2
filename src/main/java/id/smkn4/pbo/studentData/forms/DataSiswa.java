package id.smkn4.pbo.studentData.forms;

import id.smkn4.pbo.studentData.Constant;
import id.smkn4.pbo.studentData.classes.DatabaseConnection;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Locale;

public class DataSiswa extends JFrame {
    private JPanel panelMain;
    private JTable tableSiswa;
    private JButton btnRefresh;
    private JButton btnTambah;
    private JButton btnEdit;
    private JButton btnHapus;

    private final Connection koneksi;
    private int selectedRow;

    public DataSiswa(String title) {
        super(title);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(panelMain);
        this.setLocationRelativeTo(null);
        this.pack();

        koneksi = DatabaseConnection.getKoneksi(
                Constant.SQL_DATA.HOST,
                Constant.SQL_DATA.PORT,
                Constant.SQL_DATA.USER,
                Constant.SQL_DATA.PASSWORD,
                Constant.SQL_DATA.DATABASE
        );

        tableSiswa.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                selectedRow = tableSiswa.getSelectedRow();
            }
        });

        btnRefresh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                dtm.getDataVector().removeAllElements();
                showData();
            }
        });

        btnTambah.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                addRecord();
            }
        });

        btnHapus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                deleteSelectedRecord();
            }
        });

        showData();
    }

    public static void main(String[] args) {
        JFrame frame = new DataSiswa("Data Siswa");
        frame.setVisible(true);
    }

    private DefaultTableModel dtm;

    public void showData() {
        String[] kolom = {"NO", "NIS", "Nama", "Kelas", "Jurusan"};

        dtm = new DefaultTableModel(null, kolom);

        try {
            Statement stmt = koneksi.createStatement();
            String query = "SELECT * FROM " + Constant.SQL_DATA.TABLE;
            ResultSet rs = stmt.executeQuery(query);
            int no = 1;
            while (rs.next()) {
                String nis = rs.getString("nis");
                String nama = rs.getString("nama");
                String kelas = rs.getString("kelas");
                String jurusan = rs.getString("jurusan");

                dtm.addRow(new String[]{Integer.toString(no), nis, nama, kelas, jurusan});
                no++;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        tableSiswa.setModel(dtm);
    }

    public void addRecord() {
        ManageData tambahData = new ManageData(this, true);
        tambahData.setVisible(true);
    }

    public void deleteSelectedRecord() {
        String selectedNIS = tableSiswa.getValueAt(selectedRow, 1).toString();

        try {
            Statement stmt = koneksi.createStatement();
            String query = "DELETE FROM " + Constant.SQL_DATA.TABLE + " WHERE nis LIKE '" + selectedNIS + "';";
            int code = stmt.executeUpdate(query);
            if (code == 1) {
                JOptionPane.showMessageDialog(null, "Data berhasil dihapus");
                dtm.getDataVector().removeAllElements();
                showData();
            } else {
                JOptionPane.showMessageDialog(null, "Data gagal dihapus");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridBagLayout());
        btnRefresh = new JButton();
        btnRefresh.setText("Refresh");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panelMain.add(btnRefresh, gbc);
        btnTambah = new JButton();
        btnTambah.setText("Tambah");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panelMain.add(btnTambah, gbc);
        btnEdit = new JButton();
        btnEdit.setText("Ubah");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panelMain.add(btnEdit, gbc);
        btnHapus = new JButton();
        btnHapus.setText("Hapus");
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panelMain.add(btnHapus, gbc);
        tableSiswa = new JTable();
        tableSiswa.setAutoCreateRowSorter(true);
        tableSiswa.setAutoResizeMode(4);
        tableSiswa.setFillsViewportHeight(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panelMain.add(tableSiswa, gbc);
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("DATA SISWA");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 5;
        gbc.weightx = 1.0;
        panelMain.add(label1, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
