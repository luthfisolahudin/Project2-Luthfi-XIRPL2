package id.smkn4.pbo.studentData.forms;

import id.smkn4.pbo.studentData.Constant;
import id.smkn4.pbo.studentData.classes.DatabaseConnection;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Locale;

public class ManageData extends JDialog {
    private final Connection koneksi;
    private final String action;
    private final String[] daftarKelas = {"Dandelion", "White Rose"};
    private final String[] daftarJurusan = {"Otomasi Belut", "Rekayasa Awan"};
    private JPanel panelMain;
    private JButton btnSimpan;
    private JTextField textNIS;
    private JTextField textNama;
    private JComboBox comboKelas;
    private JComboBox comboJurusan;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public ManageData(Frame parent, boolean modal, String action) {
        this(parent, modal, action, "");
    }

    public ManageData(Frame parent, boolean modal, String action, String nis) {
        super(parent, modal);
        setContentPane(panelMain);
        setLocationRelativeTo(null);
        setSize(500, 200);
        getRootPane().setDefaultButton(btnSimpan);

        koneksi = DatabaseConnection.getKoneksi(
                Constant.SQL_DATA.HOST,
                Constant.SQL_DATA.PORT,
                Constant.SQL_DATA.USER,
                Constant.SQL_DATA.PASSWORD,
                Constant.SQL_DATA.DATABASE
        );
        this.action = action;

        Arrays.stream(daftarKelas).forEach(comboKelas::addItem);
        Arrays.stream(daftarJurusan).forEach(comboJurusan::addItem);

        btnSimpan.addActionListener(actionEvent -> {
            if (action.equalsIgnoreCase("editRecord")) updateData();
            else simpanData();
        });

        if (action.equalsIgnoreCase("editRecord")) {
            textNIS.setEnabled(false);
            showSelectedData(nis);
        }
    }

    public void simpanData() {
        String nis = textNIS.getText();
        String nama = textNama.getText();
        String kelas = comboKelas.getSelectedItem().toString();
        String jurusan = comboJurusan.getSelectedItem().toString();

        try {
            Statement stmt = koneksi.createStatement();
            String query = "INSERT INTO " + Constant.SQL_DATA.TABLE + "(nis, nama, kelas, jurusan) "
                    + "VALUES ('" + nis + "', '" + nama + "', '" + kelas + "', '" + jurusan + "')";
            System.out.println(query);
            int berhasil = stmt.executeUpdate(query);
            if (berhasil == 1) {
                JOptionPane.showMessageDialog(null, "Data berhasil dimasukkan");

            } else {
                JOptionPane.showMessageDialog(null, "Data gagal dimasukkan");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan pada database");
        }
    }

    private void showSelectedData(String nis) {
        try {
            Statement statement = koneksi.createStatement();
            String query = "SELECT * FROM " + Constant.SQL_DATA.TABLE + " WHERE nis LIKE '" + nis + "';";
            ResultSet resultSet = statement.executeQuery(query);
            resultSet.toString();
            resultSet.next();
            textNIS.setText(resultSet.getString("nis"));
            textNama.setText(resultSet.getString("nama"));
            comboKelas.setSelectedItem(resultSet.getString("kelas"));
            comboJurusan.setSelectedItem(resultSet.getString("jurusan"));
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan di query");
        }
    }

    private void updateData() {
        String nis = textNIS.getText();
        String nama = textNama.getText();
        String kelas = comboKelas.getSelectedItem().toString();
        String jurusan = comboJurusan.getSelectedItem().toString();

        try {
            Statement statement = koneksi.createStatement();
            String query = "UPDATE " + Constant.SQL_DATA.TABLE +
                    " SET nama = '" + nama + "', kelas = '" + kelas + "', jurusan = '" + jurusan + "'" +
                    " WHERE nis LIKE '" + nis + "';";
            System.out.println(query);
            int berhasil = statement.executeUpdate(query);
            if (berhasil == 1) {
                JOptionPane.showMessageDialog(null, "Data berhasil diubah");

            } else {
                JOptionPane.showMessageDialog(null, "Data gagal diubah");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan pada query");
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panelMain.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        btnSimpan = new JButton();
        btnSimpan.setText("Simpan");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(btnSimpan, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panelMain.add(panel3, gbc);
        textNIS = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(textNIS, gbc);
        textNama = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(textNama, gbc);
        comboKelas = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(comboKelas, gbc);
        comboJurusan = new JComboBox();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(comboJurusan, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("NIS");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel3.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Nama Lengkap");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel3.add(label2, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("Kelas");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel3.add(label3, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("Jurusan");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel3.add(label4, gbc);
        final JLabel label5 = new JLabel();
        Font label5Font = this.$$$getFont$$$(null, Font.BOLD, -1, label5.getFont());
        if (label5Font != null) label5.setFont(label5Font);
        label5.setText("Tambah Data");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(8, 8, 8, 8);
        panelMain.add(label5, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
